#!/usr/bin/env python3

from configparser import ConfigParser
import requests, json, os.path
from sys import stderr, argv
from lxml import html

from datetime import datetime
from enum import Enum
import argparse
from time import sleep

class Product:
    def __init__( self, brand_id, brand_family_id, product_name, available ):
        self.brand_id = brand_id
        self.brand_family_id = brand_family_id
        self.product_name = product_name
        self.available = available

    def __str__(self):
        return "[ Available: {3} ] {2} (Brand: {0}/ Family: {1})".format(
            self.brand_id,
            self.brand_family_id,
            self.product_name,
            self.available
        )


class ConfLoader:
    def __init__( self, conf_path ):
        parser = ConfigParser()
        parser.read( conf_path )
        self.site_url = parser.get( 'targeting', 'site_url' )
        self.brand_id = parser.get( 'targeting', 'brand_id' )
        self.barrels  = parser.get( 'targeting', 'barrels')
        self.username = parser.get( 'user', 'username' )
        self.password = parser.get( 'user', 'password' )
        self.log_file = parser.get('logging', 'log_file')
        self.max_logging_level = parser.getint('logging', 'verbosity')
        self.log_to_file = True
        self.rate_limit = parser.getfloat( 'brutality', 'rate_limit' )


####
# The SILO GROUP Python Logging module - 2020
# - Embedded for portability.
####

# Returns a timestamp in ISO 8601 format
# Reference: https://www.iso.org/iso-8601-date-and-time-format.html
def get8601():
    return datetime.now().isoformat()


# Create "verbosity channels" for logging.
class ERR( Enum ):
    FATAL = 1
    INFO  = 2
    WARN  = 3
    DEBUG = 4


class Logger():
    def __init__( self, mask_name, config ):
        # the application name
        self.mask_name = mask_name

        # the verbosity level to use
        self.verbosity = config.max_logging_level

        # boolean flag for whether to use a log file
        self.log_to_file = config.log_to_file

        # path to log file
        self.log_file = config.log_file

    def write_logfile( self, msg ):
        if self.log_to_file:
            with open( self.log_file, 'a+' ) as LF:
                LF.write( "{0}\n".format( msg ) )

    def timestamp_msg( self, msg ):
        return

    # log()
    # -
    # used by modules to print to file and log
    # params:
    # err_class - the channel to use for log messages
    # msg       - the content of the log message
    def log( self, err_class, msg ):
        # prepend 8601 format timestamp and mask name
        msg = "[{0}]\t[{1}]\t[{2}] {3}".format(
            get8601(),
            err_class.name,
            self.mask_name,
            msg
        )

        # PEP8 is not used here deliberately.  I have a rant about PEP8.
        if err_class == ERR.INFO and self.verbosity >= err_class.value:
            print( msg )
            self.write_logfile( msg )

        if err_class == ERR.WARN and self.verbosity >= err_class.value:
            print( msg, file=stderr )
            self.write_logfile( msg )

        # always show fatal errors anyway
        if err_class == ERR.FATAL:
            print( msg, file=stderr )
            self.write_logfile( msg )

        # if channel matches verbosity
        if err_class == ERR.DEBUG and self.verbosity >= err_class.value:
            print( msg )
            self.write_logfile( msg )

    # let the object be callable to use the log method
    def __call__( self, err_class, msg ):
        return self.log( err_class, msg )


success_response_codes = [ 200, 201, 301, 302 ]


class Session:
    def __init__( self, conf ):
        self.client = requests.Session()
        self.client.headers.update(
            {
                'User-Agent': "Mozilla/5.0 (X11; Fedora; Linux x86_64; rv:81.0) Gecko/20100101 Firefox/81.0",

            }
        )
        self.conf = conf
        self.inventory = list()
        self.log = Logger( 'SESSION', conf )

    def fail( self, step ):
        self.log( ERR.FATAL, "Failed during '{0}' call.".format( step ) )
        exit(1)

    def login(self):
        headers = {
            'Host': self.conf.site_url,
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.5',
            'Accept-Encoding': 'gzip, deflate, br',
            'Content-Type': 'application/x-www-form-urlencoded',
            'Origin': "https://{0}".format( self.conf.site_url ),
            'Connection': 'keep-alive',
            'Referer': "https://{0}/login".format( self.conf.site_url )
        }

        data = {
            '_method': 'POST',
            'data[AppUser][email]': self.conf.username,
            'data[AppUser][password]': self.conf.password,
            'data[User][return_to]': '',
            'data[AppUser][remember_me]': '0'
        }

        login_url = "https://{0}/app_users/login".format( self.conf.site_url )
        response = self.client.post( login_url, headers=headers, data=data )
        if response.status_code in success_response_codes:
            self.log( ERR.INFO, "Login successful." )
        else:
            self.fail( "login" )

    def update_inventory(self):
        self.log( ERR.DEBUG, "Updating Inventory." )
        inventory_pull = list()

        inventory_url = "https://{0}/orders/create-order".format( self.conf.site_url )
        response = self.client.get( inventory_url )
        if not response.status_code in success_response_codes:
            self.fail( "inventory-update" )

        deserialized_response = html.fromstring( response.text )
        product_listings_raw = deserialized_response.xpath('//*/div[@class="brands"]/div[@class="row"]/div')
        for listing in product_listings_raw:
            brand_family_id = listing.attrib['class'].split()[-1].split('-')[-1]
            product_name = listing.xpath('*/h2[@class="brand-name"]/text()')[0]
            brand_id = listing.xpath('*/div[@class="add-to-order"]/input[@id="brand_id"]')[-1].value

            availability_raw = None
            try:
                availability_raw = listing.xpath('*/div[@class="add-to-order"]/button[@disabled="disabled"]/text()')[-1]
            except:
                availability_raw = None

            if availability_raw is None:
                availability = True
            else:
                availability = False

            this_listing = Product(
                brand_id=brand_id,
                brand_family_id=brand_family_id,
                product_name=product_name,
                available=availability
            )
            self.log( ERR.DEBUG, "Item parsed: '{0}'.".format( this_listing ) )
            inventory_pull.append( this_listing )
        self.inventory = inventory_pull

    # does not hit their site, checks inventory on session
    def item_is_available(self, brand_id ):
        self.log( ERR.DEBUG, "Searching for brand_id '{0}' in inventory.".format( brand_id ) )
        for item in self.inventory:
            if item.brand_id == brand_id:
                self.log( ERR.DEBUG, "Found item: {0}".format( item ) )
                if item.available:
                    return True
        self.log( ERR.DEBUG, "Brand ID '{0}' not available.".format( brand_id ) )
        return False

    # returns a Product object from either a brand_id or product_name
    def get_item_from_inventory(self, brand_id=None, product_name=None ):
        retVal = None

        if ( brand_id is None and product_name is None ) or ( brand_id is not None and product_name is not None ):
            self.log( ERR.FATAL, "Must provide ONE OF: brand_id or product_name to pull an item from inventory." )
            self.fail( "get-item-from-inventory" )

        if product_name is not None:
            for item in self.inventory:
                if item.product_name == product_name:
                    retVal = item

        if brand_id is not None:
            for item in self.inventory:
                if item.brand_id == brand_id:
                    retVal = item

        return retVal

    # adds an item to the cart which is stored in cookies
    def add_to_cart( self, item ):
        self.log( ERR.INFO, "Adding item '{0}' to cart.".format( item.product_name ))

        headers = {
            'Host': self.conf.site_url,
            'Accept': 'application/json, text/javascript, */*; q=0.01',
            'Accept-Encoding': 'gzip, deflate, br',
            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
            'X-Requested-With': 'XMLHttpRequest',
            'Connection': 'keep-alive',
            'Referer': "https://{0}/orders/create-order".format( self.conf.site_url )
        }

        data = {
            'brandId': item.brand_id,
            'numBarrels': self.conf.barrels,
            'brandFamilyId': item.brand_family_id
        }

        cart_url = "https://{0}/orders/selected-brands".format( self.conf.site_url )
        response = self.client.post( cart_url, headers=headers, data=data )
        if response.status_code in success_response_codes:
            try:
                response_obj = json.loads( response.text )
                if len(response_obj['successMessages']) > 0:
                    self.log( ERR.INFO, "Successfully added to cart." )
                else:
                    self.log( ERR.FATAL, "Got a successful HTTP response but body did not indicate success." )
                    self.fail( "add-to-cart" )
            except:
                self.log( ERR.FATAL, "Got a non-json response and expected a json response.")
                self.fail( "add-to-cart" )
        else:
            self.log( ERR.FATAL, "Failed to add item '{0}' to cart.".format( item.product_name ) )
            self.fail( "add-to-cart" )

    # places an order with whatever's in the cart
    def place_order(self):
        # 1
        # REQ: POST https://{}/orders/create-order +BODY (NHC)
        # RSP: 302->http://{}/orders/select-delivery (redirects to:) (empty body) (NHC)
        self.log( ERR.INFO, "Creating order." )

        create_order_headers = {
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.5',
            'Accept-Encoding': 'gzip, deflate, br',
            'Content-Type': 'application/x-www-form-urlencoded',
            'Origin': "https://{0}".format( self.conf.site_url ),
            'Referer': "https://{0}/orders/create-order".format( self.conf.site_url )
        }

        create_order_data = {
            '_method': 'POST'
        }

        create_order_url = "https://{0}/orders/create-order".format( self.conf.site_url )
        create_order_response = self.client.post(
            create_order_url,
            headers=create_order_headers,
            data=create_order_data
        )

        if create_order_response.status_code not in success_response_codes:
            self.log(
                ERR.FATAL,
                "Got a bad HTTP response code creating the order ({0}).".format(
                    create_order_response.status_code
                )
            )
            self.fail( "create-order" )
        else:
            self.log( ERR.INFO, "Successfully created order." )

        # ---

        # 4
        # REQ: POST https://{}/orders/select-delivery (NHC) +BODY
        # RSP: 302->http://{}/orders/select-barrels (redirects to:)
        self.log( ERR.INFO, "Selecting delivery method." )

        select_delivery_headers = {
            'Host': '{0}'.format( self.conf.site_url ),
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.5',
            'Accept-Encoding': 'gzip, deflate, br',
            'Content-Type': 'application/x-www-form-urlencoded',
            'Origin': 'https://{0}',
            'Connection': 'keep-alive',
            'Referer': 'https://{0}/orders/select-delivery'.format( self.conf.site_url )
        }

        select_delivery_data = {
            '_method': "POST",
            'data[Order][retailer_selection]': ',pick for me',
            'data[Address][country_id]': '',
            'data[Address][zone_id][6]': '',
            'data[Address][zone_id][1]': '',
            'data[Address][city]': '',
            'data[Order][retailer_id]': '',
            'data[Order][account_notes]': ''
        }

        select_delivery_url = "https://{0}/orders/select-delivery".format( self.conf.site_url )
        select_delivery_response = self.client.post(
            select_delivery_url,
            headers=select_delivery_headers,
            data=select_delivery_data
        )

        if select_delivery_response.status_code not in success_response_codes:
            self.log(
                ERR.FATAL,
                "Got a bad HTTP response when selecting delivery method ({0}).".format(
                    select_delivery_response.status_code
                )
            )
            self.fail( "delivery-select" )
        else:
            self.log( ERR.INFO, "Selected delivery method." )

        # ---

        # 7
        # REQ: POST https://{}/orders/select-barrels +BODY
        # RSP: 302->http://{}/orders/schedule-distillery-visit
        self.log( ERR.INFO, "Registering barrel selection preference." )

        select_barrels_headers = {
            'Host': ''.format( self.conf.site_url ),
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.5',
            'Accept-Encoding': 'gzip, deflate, br',
            'Content-Type': 'application/x-www-form-urlencoded',
            'Origin': 'https://{0}'.format( self.conf.site_url ),
            'Connection': 'keep-alive',
            'Referer': 'https://{0}/orders/select-barrels'.format( self.conf.site_url )
        }

        select_barrels_data = {
            '_method': 'POST',
            'barrelSelectionPreference': '2'
        }

        select_barrels_url = "https://{0}/orders/select-barrels".format( self.conf.site_url )
        select_barrels_response = self.client.post(
            select_barrels_url,
            headers=select_barrels_headers,
            data=select_barrels_data
        )

        if select_barrels_response.status_code not in success_response_codes:
            self.log(
                ERR.FATAL,
                "Got a bad HTTP response when setting barrel selection preference ({0}).".format(
                    select_barrels_response.status_code
                )
            )
            self.fail( "select-barrels" )
        else:
            self.log( ERR.INFO, "Registered barrel selection preference." )

        # ---

        # 10
        # REQ: POST https://{}/orders/schedule-distillery-visit (NHC) +BODY
        # RSP: 302->http://{}/orders/confirm
        self.log( ERR.INFO, "Scheduling distillery visit." )

        schedule_distillery_visit_headers = {
            'Host': '{0}'.format( self.conf.site_url ),
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.5',
            'Accept-Encoding': 'gzip, deflate, br',
            'Content-Type': 'application/x-www-form-urlencoded',
            'Origin': 'https://{0}'.format( self.conf.site_url ),
            'Connection': 'keep-alive',
            'Referer': 'https://{0}/orders/schedule-distillery-visit'.format( self.conf.site_url )
        }

        schedule_distillery_visit_data = {
            '_method': 'POST',
            'data[TripDetail][5][schedule_visit]': '0,1',
            'data[TripDetail][5][trip_date]': '06/04/2021',
            'data[TripDetail][5][people_attending_trip]': '1',
            'data[TripDetail][5][tour]': '0,1',
            'data[TripDetail][5][lunch]': '0,1',
            'data[TripDetail][5][morning_visit]':'am',
            'data[Unscheduled][sample_type_id]': '3'
        }

        schedule_distillery_visit_url = "https://{0}/orders/schedule-distillery-visit".format( self.conf.site_url )
        schedule_distillery_visit_response = self.client.post(
            schedule_distillery_visit_url,
            headers=schedule_distillery_visit_headers,
            data=schedule_distillery_visit_data
        )

        if schedule_distillery_visit_response.status_code not in success_response_codes:
            self.fail( "schedule-distillery-visit" )
        else:
            self.log( ERR.INFO, "Scheduled distiller visit." )

        # ---

        # 13
        # REQ: POST https://{}/orders/confirm
            # body: "_method=POST"
        # RSP: 302->http://{}/orders/order-complete (EB)
        self.log( ERR.INFO, "Confirming order." )

        confirm_headers = {
            'Host': "{0}".format( self.conf.site_url ),
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.5',
            'Accept-Encoding': 'gzip, deflate, br',
            'Content-Type': 'application/x-www-form-urlencoded',
            'Origin': "https://{0}".format( self.conf.site_url ),
            'Connection': 'keep-alive',
            'Referer': "https://{0}/orders/confirm".format( self.conf.site_url )
        }

        confirm_data = {
            '_method': 'POST'
        }

        confirm_url = "https://{0}/orders/confirm".format( self.conf.site_url )
        confirm_response = self.client.post( confirm_url, headers=confirm_headers, data=confirm_data )

        if confirm_response.status_code not in success_response_codes:
            self.fail("confirm")
        else:
            self.log( ERR.INFO, "Order confirmed." )

        self.log( ERR.INFO, "Order complete.  This feature is untested.  Please log in manually and confirm." )

        # ---

        # 15
        # REQ: POST https://{}/orders/order-complete (EB)
        # RSP: 200
        self.log( ERR.INFO, "Completing order." )

        order_complete_headers = {
            'Host': "{0}".format( self.conf.site_url ),
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.5',
            'Accept-Encoding': 'gzip, deflate, br',
            'Connection': 'keep-alive'
        }

        order_complete_url = "https://{0}/orders/order-complete".format( self.conf.site_url )
        order_complete_response = self.client.post(
            order_complete_url,
            headers=order_complete_headers
         )

        if order_complete_response.status_code not in success_response_codes:
            self.fail("order-complete")
        else:
            self.log( ERR.INFO, "Order submitted." )

        # ---


def list_items( session, all=False ):
    log = Logger( 'Inventory', session.conf )
    for item in session.inventory:
        if not all:
            if item.available:
                log( ERR.INFO, item )
        else:
            log( ERR.INFO, item )


def buy( session ):
    log = Logger( 'Buy', session.conf )

    if session.item_is_available( brand_id=session.conf.brand_id ):
        item = session.get_item_from_inventory( brand_id=session.conf.brand_id )
        log( ERR.INFO, "The item '{0}' is available for purchase.".format( item.product_name ) )
        session.add_to_cart( item )
        session.place_order()
    else:
        log( ERR.FATAL, "The configured item is not available for purchase." )
        exit(1)


def main():
    parser = argparse.ArgumentParser(
        description="Interacts with a specific website.",
        prog="{0}".format( os.path.basename( __file__ ) ),
        epilog='Designed and implemented by Chris Punches <chris.punches@silogroup.org>.'
    )

    options = parser.add_mutually_exclusive_group()
    options.add_argument( "-l", "--list-available", help="List available items", action='store_true' )
    options.add_argument( "-la", "--list-all", help="List all items", action='store_true' )
    options.add_argument( "-b", "--buy", help="Buy the configured item.", action='store_true' )

    persistence_option = parser.add_mutually_exclusive_group()
    persistence_option.add_argument(
        "-p",
        "--persist",
        help="Loop through inventory until product in config becomes available, then buy it and exit.",
        action='store_true'
    )

    conf_options = parser.add_argument(
        "-c",
        "--config-file",
        help="Override the path to the config file.",
        default='./Conf/configuration.ini'
    )

    arguments = parser.parse_args()

    if len(argv) == 1:
        parser.print_help( stderr )
        exit(1)

    conf = ConfLoader( arguments.config_file )
    log = Logger( 'Main', conf )
    log( ERR.INFO, "Process started.".format( arguments.config_file ) )
    log( ERR.INFO, "Loaded configuration file at '{0}'.".format( arguments.config_file ) )

    session = Session( conf )
    session.login()
    session.update_inventory()

    if arguments.buy:
        log( ERR.INFO, "Attempting to place an order for the configured item with brand ID '{0}'.".format( conf.brand_id ))
        buy ( session )

    if arguments.list_all:
        log( ERR.INFO, "Listing all items..." )
        list_items( session, all=True )

    if arguments.list_available:
        log( ERR.INFO, "Listing all available items..." )
        list_items( session, all=False )

    if arguments.persist:
        log( ERR.INFO, "Entering daemon mode until purchase or failure." )
        while True:
            # rate limit in between inventory update cycles to prevent erroneous ddos detection
            sleep( session.conf.rate_limit )
            session.update_inventory()
            if session.item_is_available( brand_id=session.conf.brand_id ):
                item = session.get_item_from_inventory( brand_id=session.conf.brand_id )
                log( ERR.INFO, "Found item named '{0}'.".format( item.product_name  ) )
                log( ERR.INFO, "Preparing to purchase one barrel of '{0}'.".format( item.product_name  ) )
                # disarmed until D-day
                # session.add_to_cart( item )
                # session.place_order()
                exit(0)
            else:
                log(ERR.INFO, "Brand ID '{0}' not available. Cycling...".format( session.conf.brand_id ))


if __name__ == '__main__':
    main()
